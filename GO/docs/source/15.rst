TODO
======

1.前端部分
------

1. **解决tenuki.js的非法落子问题，或者测试使用Client模式**
#. 添加pass和悔棋功能(需要对方确认)
#. 去除手动输入游戏ID的设定，增加一个游戏大厅模块，用户可以可视化的选择加入游戏。创建游戏时由系统自动生成游戏ID
#. 增加AI对战模式
#. 增加认输功能

2.后端部分
------

1. 增加游戏结束的处理部分，进行玩家分数和对局记录的修改
#. bug修复，不允许同一个玩家加入同一局游戏
#. **增加与AI的对接口，gtp协议等**
#. **与区块链脚本连接**

3.区块链部分
------

1. 将用户的标签（key）传输到服务器根节点上并赋予权限

- 方案1 直接用python的socket 传输数据 （需要在服务端再用一个脚本监听端口）
- 方案2 向我网站的一个url POST数据，只需要在服务端进行处理（还需测试）

4.网站安全性
------

1. 前端用来检测用户登录的cookie目前只是一个试验品，只存储了登录标志和用户名，接下来要加入一定的验证机制，在加载时将验证信息传回服务器进行验证
#. 目前的密码验证、传输与存储采用明文，接下来要采用密码+扰码的hash值作为验证、传输和存储的方式

上述问题可以用flask-openid和Flask-WTF两个库解决，比较麻烦的一点是教程与其最新版本可能不对应
